// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.4
// source: runtime_state.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OrchestrationRuntimeState holds the current state for an orchestration.
type OrchestrationRuntimeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId      string                              `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	NewEvents       []*HistoryEvent                     `protobuf:"bytes,2,rep,name=newEvents,proto3" json:"newEvents,omitempty"`
	OldEvents       []*HistoryEvent                     `protobuf:"bytes,3,rep,name=oldEvents,proto3" json:"oldEvents,omitempty"`
	PendingTasks    []*HistoryEvent                     `protobuf:"bytes,4,rep,name=pendingTasks,proto3" json:"pendingTasks,omitempty"`
	PendingTimers   []*HistoryEvent                     `protobuf:"bytes,5,rep,name=pendingTimers,proto3" json:"pendingTimers,omitempty"`
	PendingMessages []*OrchestrationRuntimeStateMessage `protobuf:"bytes,6,rep,name=pendingMessages,proto3" json:"pendingMessages,omitempty"`
	StartEvent      *ExecutionStartedEvent              `protobuf:"bytes,7,opt,name=startEvent,proto3" json:"startEvent,omitempty"`
	CompletedEvent  *ExecutionCompletedEvent            `protobuf:"bytes,8,opt,name=completedEvent,proto3" json:"completedEvent,omitempty"`
	CreatedTime     *timestamppb.Timestamp              `protobuf:"bytes,9,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	LastUpdatedTime *timestamppb.Timestamp              `protobuf:"bytes,10,opt,name=lastUpdatedTime,proto3" json:"lastUpdatedTime,omitempty"`
	CompletedTime   *timestamppb.Timestamp              `protobuf:"bytes,11,opt,name=completedTime,proto3" json:"completedTime,omitempty"`
	ContinuedAsNew  bool                                `protobuf:"varint,12,opt,name=continuedAsNew,proto3" json:"continuedAsNew,omitempty"`
	IsSuspended     bool                                `protobuf:"varint,13,opt,name=isSuspended,proto3" json:"isSuspended,omitempty"`
	CustomStatus    *wrapperspb.StringValue             `protobuf:"bytes,14,opt,name=customStatus,proto3" json:"customStatus,omitempty"`
}

func (x *OrchestrationRuntimeState) Reset() {
	*x = OrchestrationRuntimeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestrationRuntimeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestrationRuntimeState) ProtoMessage() {}

func (x *OrchestrationRuntimeState) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestrationRuntimeState.ProtoReflect.Descriptor instead.
func (*OrchestrationRuntimeState) Descriptor() ([]byte, []int) {
	return file_runtime_state_proto_rawDescGZIP(), []int{0}
}

func (x *OrchestrationRuntimeState) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *OrchestrationRuntimeState) GetNewEvents() []*HistoryEvent {
	if x != nil {
		return x.NewEvents
	}
	return nil
}

func (x *OrchestrationRuntimeState) GetOldEvents() []*HistoryEvent {
	if x != nil {
		return x.OldEvents
	}
	return nil
}

func (x *OrchestrationRuntimeState) GetPendingTasks() []*HistoryEvent {
	if x != nil {
		return x.PendingTasks
	}
	return nil
}

func (x *OrchestrationRuntimeState) GetPendingTimers() []*HistoryEvent {
	if x != nil {
		return x.PendingTimers
	}
	return nil
}

func (x *OrchestrationRuntimeState) GetPendingMessages() []*OrchestrationRuntimeStateMessage {
	if x != nil {
		return x.PendingMessages
	}
	return nil
}

func (x *OrchestrationRuntimeState) GetStartEvent() *ExecutionStartedEvent {
	if x != nil {
		return x.StartEvent
	}
	return nil
}

func (x *OrchestrationRuntimeState) GetCompletedEvent() *ExecutionCompletedEvent {
	if x != nil {
		return x.CompletedEvent
	}
	return nil
}

func (x *OrchestrationRuntimeState) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *OrchestrationRuntimeState) GetLastUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedTime
	}
	return nil
}

func (x *OrchestrationRuntimeState) GetCompletedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedTime
	}
	return nil
}

func (x *OrchestrationRuntimeState) GetContinuedAsNew() bool {
	if x != nil {
		return x.ContinuedAsNew
	}
	return false
}

func (x *OrchestrationRuntimeState) GetIsSuspended() bool {
	if x != nil {
		return x.IsSuspended
	}
	return false
}

func (x *OrchestrationRuntimeState) GetCustomStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomStatus
	}
	return nil
}

// OrchestrationRuntimeStateMessage holds an OrchestratorMessage and the target instance ID.
type OrchestrationRuntimeStateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoryEvent     *HistoryEvent `protobuf:"bytes,1,opt,name=historyEvent,proto3" json:"historyEvent,omitempty"`
	TargetInstanceID string        `protobuf:"bytes,2,opt,name=TargetInstanceID,proto3" json:"TargetInstanceID,omitempty"`
}

func (x *OrchestrationRuntimeStateMessage) Reset() {
	*x = OrchestrationRuntimeStateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_runtime_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrchestrationRuntimeStateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrchestrationRuntimeStateMessage) ProtoMessage() {}

func (x *OrchestrationRuntimeStateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_runtime_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrchestrationRuntimeStateMessage.ProtoReflect.Descriptor instead.
func (*OrchestrationRuntimeStateMessage) Descriptor() ([]byte, []int) {
	return file_runtime_state_proto_rawDescGZIP(), []int{1}
}

func (x *OrchestrationRuntimeStateMessage) GetHistoryEvent() *HistoryEvent {
	if x != nil {
		return x.HistoryEvent
	}
	return nil
}

func (x *OrchestrationRuntimeStateMessage) GetTargetInstanceID() string {
	if x != nil {
		return x.TargetInstanceID
	}
	return ""
}

var File_runtime_state_proto protoreflect.FileDescriptor

var file_runtime_state_proto_rawDesc = []byte{
	0x0a, 0x13, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x64, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb4, 0x06, 0x0a, 0x19, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x09,
	0x6f, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x6f, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x33, 0x0a, 0x0d,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x73, 0x12, 0x69, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x64, 0x75, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x41, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x41,
	0x73, 0x4e, 0x65, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x20, 0x4f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x0c, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x42, 0x61, 0x0a, 0x31,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x64, 0x75,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x5a, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0xaa, 0x02,
	0x1e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_runtime_state_proto_rawDescOnce sync.Once
	file_runtime_state_proto_rawDescData = file_runtime_state_proto_rawDesc
)

func file_runtime_state_proto_rawDescGZIP() []byte {
	file_runtime_state_proto_rawDescOnce.Do(func() {
		file_runtime_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_runtime_state_proto_rawDescData)
	})
	return file_runtime_state_proto_rawDescData
}

var file_runtime_state_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_runtime_state_proto_goTypes = []interface{}{
	(*OrchestrationRuntimeState)(nil),        // 0: durabletask.protos.backend.v1.OrchestrationRuntimeState
	(*OrchestrationRuntimeStateMessage)(nil), // 1: durabletask.protos.backend.v1.OrchestrationRuntimeStateMessage
	(*HistoryEvent)(nil),                     // 2: HistoryEvent
	(*ExecutionStartedEvent)(nil),            // 3: ExecutionStartedEvent
	(*ExecutionCompletedEvent)(nil),          // 4: ExecutionCompletedEvent
	(*timestamppb.Timestamp)(nil),            // 5: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),           // 6: google.protobuf.StringValue
}
var file_runtime_state_proto_depIdxs = []int32{
	2,  // 0: durabletask.protos.backend.v1.OrchestrationRuntimeState.newEvents:type_name -> HistoryEvent
	2,  // 1: durabletask.protos.backend.v1.OrchestrationRuntimeState.oldEvents:type_name -> HistoryEvent
	2,  // 2: durabletask.protos.backend.v1.OrchestrationRuntimeState.pendingTasks:type_name -> HistoryEvent
	2,  // 3: durabletask.protos.backend.v1.OrchestrationRuntimeState.pendingTimers:type_name -> HistoryEvent
	1,  // 4: durabletask.protos.backend.v1.OrchestrationRuntimeState.pendingMessages:type_name -> durabletask.protos.backend.v1.OrchestrationRuntimeStateMessage
	3,  // 5: durabletask.protos.backend.v1.OrchestrationRuntimeState.startEvent:type_name -> ExecutionStartedEvent
	4,  // 6: durabletask.protos.backend.v1.OrchestrationRuntimeState.completedEvent:type_name -> ExecutionCompletedEvent
	5,  // 7: durabletask.protos.backend.v1.OrchestrationRuntimeState.createdTime:type_name -> google.protobuf.Timestamp
	5,  // 8: durabletask.protos.backend.v1.OrchestrationRuntimeState.lastUpdatedTime:type_name -> google.protobuf.Timestamp
	5,  // 9: durabletask.protos.backend.v1.OrchestrationRuntimeState.completedTime:type_name -> google.protobuf.Timestamp
	6,  // 10: durabletask.protos.backend.v1.OrchestrationRuntimeState.customStatus:type_name -> google.protobuf.StringValue
	2,  // 11: durabletask.protos.backend.v1.OrchestrationRuntimeStateMessage.historyEvent:type_name -> HistoryEvent
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_runtime_state_proto_init() }
func file_runtime_state_proto_init() {
	if File_runtime_state_proto != nil {
		return
	}
	file_orchestrator_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_runtime_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrchestrationRuntimeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_runtime_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrchestrationRuntimeStateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_runtime_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_runtime_state_proto_goTypes,
		DependencyIndexes: file_runtime_state_proto_depIdxs,
		MessageInfos:      file_runtime_state_proto_msgTypes,
	}.Build()
	File_runtime_state_proto = out.File
	file_runtime_state_proto_rawDesc = nil
	file_runtime_state_proto_goTypes = nil
	file_runtime_state_proto_depIdxs = nil
}
