// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: backend_service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BackendService_CreateInstance_FullMethodName                = "/durabletask.protos.backend.v1.BackendService/CreateInstance"
	BackendService_AddEvent_FullMethodName                      = "/durabletask.protos.backend.v1.BackendService/AddEvent"
	BackendService_GetInstance_FullMethodName                   = "/durabletask.protos.backend.v1.BackendService/GetInstance"
	BackendService_QueryInstances_FullMethodName                = "/durabletask.protos.backend.v1.BackendService/QueryInstances"
	BackendService_WaitForInstance_FullMethodName               = "/durabletask.protos.backend.v1.BackendService/WaitForInstance"
	BackendService_PurgeInstances_FullMethodName                = "/durabletask.protos.backend.v1.BackendService/PurgeInstances"
	BackendService_GetWorkItems_FullMethodName                  = "/durabletask.protos.backend.v1.BackendService/GetWorkItems"
	BackendService_GetOrchestrationRuntimeState_FullMethodName  = "/durabletask.protos.backend.v1.BackendService/GetOrchestrationRuntimeState"
	BackendService_CompleteActivityWorkItem_FullMethodName      = "/durabletask.protos.backend.v1.BackendService/CompleteActivityWorkItem"
	BackendService_AbandonActivityWorkItem_FullMethodName       = "/durabletask.protos.backend.v1.BackendService/AbandonActivityWorkItem"
	BackendService_CompleteOrchestrationWorkItem_FullMethodName = "/durabletask.protos.backend.v1.BackendService/CompleteOrchestrationWorkItem"
	BackendService_AbandonOrchestrationWorkItem_FullMethodName  = "/durabletask.protos.backend.v1.BackendService/AbandonOrchestrationWorkItem"
	BackendService_Ping_FullMethodName                          = "/durabletask.protos.backend.v1.BackendService/Ping"
)

// BackendServiceClient is the client API for BackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendServiceClient interface {
	// Creates a new orchestration instance.
	CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error)
	// Sends an event to an orchestration instance. This RPC is used for raising external events to orchestrations
	// and for sending orchestration lifecycle events, such as terminate, suspend, resume, etc.
	AddEvent(ctx context.Context, in *AddEventRequest, opts ...grpc.CallOption) (*AddEventResponse, error)
	// Returns metadata about an orchestration instance.
	GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error)
	// Returns metadata about multiple orchestration instances using a query.
	QueryInstances(ctx context.Context, in *QueryInstancesRequest, opts ...grpc.CallOption) (*QueryInstancesResponse, error)
	// Waits for an orchestration to reach a terminal state and then returns metadata for that orchestration.
	WaitForInstance(ctx context.Context, in *WaitForInstanceRequest, opts ...grpc.CallOption) (*WaitForInstanceResponse, error)
	// Purges the state of one or more orchestration instances.
	PurgeInstances(ctx context.Context, in *PurgeInstancesRequest, opts ...grpc.CallOption) (*PurgeInstancesResponse, error)
	// Starts a server stream for receiving work items
	GetWorkItems(ctx context.Context, in *GetWorkItemsRequest, opts ...grpc.CallOption) (BackendService_GetWorkItemsClient, error)
	// Gets orchestration runtime state (history, etc.) for a given orchestration instance.
	GetOrchestrationRuntimeState(ctx context.Context, in *GetOrchestrationRuntimeStateRequest, opts ...grpc.CallOption) (*GetOrchestrationRuntimeStateResponse, error)
	// Completes an outstanding activity work item and adds a new event to the target orchestration's inbox.
	CompleteActivityWorkItem(ctx context.Context, in *CompleteActivityWorkItemRequest, opts ...grpc.CallOption) (*CompleteActivityWorkItemResponse, error)
	// Abandons an outstanding activity work item. Abandoned work items will be delivered again after some delay.
	AbandonActivityWorkItem(ctx context.Context, in *AbandonActivityWorkItemRequest, opts ...grpc.CallOption) (*AbandonActivityWorkItemResponse, error)
	// Completes an outstanding orchestrator work item, and adds a new event to the target orchestration's inbox.
	CompleteOrchestrationWorkItem(ctx context.Context, in *CompleteOrchestrationWorkItemRequest, opts ...grpc.CallOption) (*CompleteOrchestrationWorkItemResponse, error)
	// Abandons an outstanding orchestrator work item. Abandoned work items will be delivered again after some delay.
	AbandonOrchestrationWorkItem(ctx context.Context, in *AbandonOrchestrationWorkItemRequest, opts ...grpc.CallOption) (*AbandonOrchestrationWorkItemResponse, error)
	// Sends a health check ping to the backend service.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type backendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendServiceClient(cc grpc.ClientConnInterface) BackendServiceClient {
	return &backendServiceClient{cc}
}

func (c *backendServiceClient) CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error) {
	out := new(CreateInstanceResponse)
	err := c.cc.Invoke(ctx, BackendService_CreateInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) AddEvent(ctx context.Context, in *AddEventRequest, opts ...grpc.CallOption) (*AddEventResponse, error) {
	out := new(AddEventResponse)
	err := c.cc.Invoke(ctx, BackendService_AddEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error) {
	out := new(GetInstanceResponse)
	err := c.cc.Invoke(ctx, BackendService_GetInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) QueryInstances(ctx context.Context, in *QueryInstancesRequest, opts ...grpc.CallOption) (*QueryInstancesResponse, error) {
	out := new(QueryInstancesResponse)
	err := c.cc.Invoke(ctx, BackendService_QueryInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) WaitForInstance(ctx context.Context, in *WaitForInstanceRequest, opts ...grpc.CallOption) (*WaitForInstanceResponse, error) {
	out := new(WaitForInstanceResponse)
	err := c.cc.Invoke(ctx, BackendService_WaitForInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) PurgeInstances(ctx context.Context, in *PurgeInstancesRequest, opts ...grpc.CallOption) (*PurgeInstancesResponse, error) {
	out := new(PurgeInstancesResponse)
	err := c.cc.Invoke(ctx, BackendService_PurgeInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetWorkItems(ctx context.Context, in *GetWorkItemsRequest, opts ...grpc.CallOption) (BackendService_GetWorkItemsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BackendService_ServiceDesc.Streams[0], BackendService_GetWorkItems_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &backendServiceGetWorkItemsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BackendService_GetWorkItemsClient interface {
	Recv() (*WorkItem, error)
	grpc.ClientStream
}

type backendServiceGetWorkItemsClient struct {
	grpc.ClientStream
}

func (x *backendServiceGetWorkItemsClient) Recv() (*WorkItem, error) {
	m := new(WorkItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *backendServiceClient) GetOrchestrationRuntimeState(ctx context.Context, in *GetOrchestrationRuntimeStateRequest, opts ...grpc.CallOption) (*GetOrchestrationRuntimeStateResponse, error) {
	out := new(GetOrchestrationRuntimeStateResponse)
	err := c.cc.Invoke(ctx, BackendService_GetOrchestrationRuntimeState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CompleteActivityWorkItem(ctx context.Context, in *CompleteActivityWorkItemRequest, opts ...grpc.CallOption) (*CompleteActivityWorkItemResponse, error) {
	out := new(CompleteActivityWorkItemResponse)
	err := c.cc.Invoke(ctx, BackendService_CompleteActivityWorkItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) AbandonActivityWorkItem(ctx context.Context, in *AbandonActivityWorkItemRequest, opts ...grpc.CallOption) (*AbandonActivityWorkItemResponse, error) {
	out := new(AbandonActivityWorkItemResponse)
	err := c.cc.Invoke(ctx, BackendService_AbandonActivityWorkItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) CompleteOrchestrationWorkItem(ctx context.Context, in *CompleteOrchestrationWorkItemRequest, opts ...grpc.CallOption) (*CompleteOrchestrationWorkItemResponse, error) {
	out := new(CompleteOrchestrationWorkItemResponse)
	err := c.cc.Invoke(ctx, BackendService_CompleteOrchestrationWorkItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) AbandonOrchestrationWorkItem(ctx context.Context, in *AbandonOrchestrationWorkItemRequest, opts ...grpc.CallOption) (*AbandonOrchestrationWorkItemResponse, error) {
	out := new(AbandonOrchestrationWorkItemResponse)
	err := c.cc.Invoke(ctx, BackendService_AbandonOrchestrationWorkItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, BackendService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServiceServer is the server API for BackendService service.
// All implementations must embed UnimplementedBackendServiceServer
// for forward compatibility
type BackendServiceServer interface {
	// Creates a new orchestration instance.
	CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error)
	// Sends an event to an orchestration instance. This RPC is used for raising external events to orchestrations
	// and for sending orchestration lifecycle events, such as terminate, suspend, resume, etc.
	AddEvent(context.Context, *AddEventRequest) (*AddEventResponse, error)
	// Returns metadata about an orchestration instance.
	GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error)
	// Returns metadata about multiple orchestration instances using a query.
	QueryInstances(context.Context, *QueryInstancesRequest) (*QueryInstancesResponse, error)
	// Waits for an orchestration to reach a terminal state and then returns metadata for that orchestration.
	WaitForInstance(context.Context, *WaitForInstanceRequest) (*WaitForInstanceResponse, error)
	// Purges the state of one or more orchestration instances.
	PurgeInstances(context.Context, *PurgeInstancesRequest) (*PurgeInstancesResponse, error)
	// Starts a server stream for receiving work items
	GetWorkItems(*GetWorkItemsRequest, BackendService_GetWorkItemsServer) error
	// Gets orchestration runtime state (history, etc.) for a given orchestration instance.
	GetOrchestrationRuntimeState(context.Context, *GetOrchestrationRuntimeStateRequest) (*GetOrchestrationRuntimeStateResponse, error)
	// Completes an outstanding activity work item and adds a new event to the target orchestration's inbox.
	CompleteActivityWorkItem(context.Context, *CompleteActivityWorkItemRequest) (*CompleteActivityWorkItemResponse, error)
	// Abandons an outstanding activity work item. Abandoned work items will be delivered again after some delay.
	AbandonActivityWorkItem(context.Context, *AbandonActivityWorkItemRequest) (*AbandonActivityWorkItemResponse, error)
	// Completes an outstanding orchestrator work item, and adds a new event to the target orchestration's inbox.
	CompleteOrchestrationWorkItem(context.Context, *CompleteOrchestrationWorkItemRequest) (*CompleteOrchestrationWorkItemResponse, error)
	// Abandons an outstanding orchestrator work item. Abandoned work items will be delivered again after some delay.
	AbandonOrchestrationWorkItem(context.Context, *AbandonOrchestrationWorkItemRequest) (*AbandonOrchestrationWorkItemResponse, error)
	// Sends a health check ping to the backend service.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedBackendServiceServer()
}

// UnimplementedBackendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBackendServiceServer struct {
}

func (UnimplementedBackendServiceServer) CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}
func (UnimplementedBackendServiceServer) AddEvent(context.Context, *AddEventRequest) (*AddEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEvent not implemented")
}
func (UnimplementedBackendServiceServer) GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstance not implemented")
}
func (UnimplementedBackendServiceServer) QueryInstances(context.Context, *QueryInstancesRequest) (*QueryInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInstances not implemented")
}
func (UnimplementedBackendServiceServer) WaitForInstance(context.Context, *WaitForInstanceRequest) (*WaitForInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForInstance not implemented")
}
func (UnimplementedBackendServiceServer) PurgeInstances(context.Context, *PurgeInstancesRequest) (*PurgeInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeInstances not implemented")
}
func (UnimplementedBackendServiceServer) GetWorkItems(*GetWorkItemsRequest, BackendService_GetWorkItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWorkItems not implemented")
}
func (UnimplementedBackendServiceServer) GetOrchestrationRuntimeState(context.Context, *GetOrchestrationRuntimeStateRequest) (*GetOrchestrationRuntimeStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrchestrationRuntimeState not implemented")
}
func (UnimplementedBackendServiceServer) CompleteActivityWorkItem(context.Context, *CompleteActivityWorkItemRequest) (*CompleteActivityWorkItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteActivityWorkItem not implemented")
}
func (UnimplementedBackendServiceServer) AbandonActivityWorkItem(context.Context, *AbandonActivityWorkItemRequest) (*AbandonActivityWorkItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbandonActivityWorkItem not implemented")
}
func (UnimplementedBackendServiceServer) CompleteOrchestrationWorkItem(context.Context, *CompleteOrchestrationWorkItemRequest) (*CompleteOrchestrationWorkItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteOrchestrationWorkItem not implemented")
}
func (UnimplementedBackendServiceServer) AbandonOrchestrationWorkItem(context.Context, *AbandonOrchestrationWorkItemRequest) (*AbandonOrchestrationWorkItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbandonOrchestrationWorkItem not implemented")
}
func (UnimplementedBackendServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBackendServiceServer) mustEmbedUnimplementedBackendServiceServer() {}

// UnsafeBackendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServiceServer will
// result in compilation errors.
type UnsafeBackendServiceServer interface {
	mustEmbedUnimplementedBackendServiceServer()
}

func RegisterBackendServiceServer(s grpc.ServiceRegistrar, srv BackendServiceServer) {
	s.RegisterService(&BackendService_ServiceDesc, srv)
}

func _BackendService_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CreateInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CreateInstance(ctx, req.(*CreateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_AddEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).AddEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_AddEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).AddEvent(ctx, req.(*AddEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetInstance(ctx, req.(*GetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_QueryInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).QueryInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_QueryInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).QueryInstances(ctx, req.(*QueryInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_WaitForInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).WaitForInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_WaitForInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).WaitForInstance(ctx, req.(*WaitForInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_PurgeInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).PurgeInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_PurgeInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).PurgeInstances(ctx, req.(*PurgeInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetWorkItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetWorkItemsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackendServiceServer).GetWorkItems(m, &backendServiceGetWorkItemsServer{stream})
}

type BackendService_GetWorkItemsServer interface {
	Send(*WorkItem) error
	grpc.ServerStream
}

type backendServiceGetWorkItemsServer struct {
	grpc.ServerStream
}

func (x *backendServiceGetWorkItemsServer) Send(m *WorkItem) error {
	return x.ServerStream.SendMsg(m)
}

func _BackendService_GetOrchestrationRuntimeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrchestrationRuntimeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetOrchestrationRuntimeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetOrchestrationRuntimeState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetOrchestrationRuntimeState(ctx, req.(*GetOrchestrationRuntimeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CompleteActivityWorkItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteActivityWorkItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CompleteActivityWorkItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CompleteActivityWorkItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CompleteActivityWorkItem(ctx, req.(*CompleteActivityWorkItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_AbandonActivityWorkItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbandonActivityWorkItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).AbandonActivityWorkItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_AbandonActivityWorkItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).AbandonActivityWorkItem(ctx, req.(*AbandonActivityWorkItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_CompleteOrchestrationWorkItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteOrchestrationWorkItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).CompleteOrchestrationWorkItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_CompleteOrchestrationWorkItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).CompleteOrchestrationWorkItem(ctx, req.(*CompleteOrchestrationWorkItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_AbandonOrchestrationWorkItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbandonOrchestrationWorkItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).AbandonOrchestrationWorkItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_AbandonOrchestrationWorkItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).AbandonOrchestrationWorkItem(ctx, req.(*AbandonOrchestrationWorkItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendService_ServiceDesc is the grpc.ServiceDesc for BackendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "durabletask.protos.backend.v1.BackendService",
	HandlerType: (*BackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInstance",
			Handler:    _BackendService_CreateInstance_Handler,
		},
		{
			MethodName: "AddEvent",
			Handler:    _BackendService_AddEvent_Handler,
		},
		{
			MethodName: "GetInstance",
			Handler:    _BackendService_GetInstance_Handler,
		},
		{
			MethodName: "QueryInstances",
			Handler:    _BackendService_QueryInstances_Handler,
		},
		{
			MethodName: "WaitForInstance",
			Handler:    _BackendService_WaitForInstance_Handler,
		},
		{
			MethodName: "PurgeInstances",
			Handler:    _BackendService_PurgeInstances_Handler,
		},
		{
			MethodName: "GetOrchestrationRuntimeState",
			Handler:    _BackendService_GetOrchestrationRuntimeState_Handler,
		},
		{
			MethodName: "CompleteActivityWorkItem",
			Handler:    _BackendService_CompleteActivityWorkItem_Handler,
		},
		{
			MethodName: "AbandonActivityWorkItem",
			Handler:    _BackendService_AbandonActivityWorkItem_Handler,
		},
		{
			MethodName: "CompleteOrchestrationWorkItem",
			Handler:    _BackendService_CompleteOrchestrationWorkItem_Handler,
		},
		{
			MethodName: "AbandonOrchestrationWorkItem",
			Handler:    _BackendService_AbandonOrchestrationWorkItem_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _BackendService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWorkItems",
			Handler:       _BackendService_GetWorkItems_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backend_service.proto",
}
